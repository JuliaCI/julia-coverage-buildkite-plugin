#!/usr/bin/env julia

# This plugin doesn't error by default but instead annotates the build with the error
# message and exits
FAIL_ON_ERROR = get(ENV, "BUILDKITE_PLUGIN_JULIA_COVERAGE_FAIL_ON_ERROR", "false") == "true"
function annotate_and_exit(msg)
    msg = "Coverage: $msg"
    if FAIL_ON_ERROR
        error(msg)
    else
        run(`buildkite-agent annotate $msg --style "error" --context "ctx-coverage"`)
        exit(0)
    end
end

# Early sanity checks
const bk_repo = get(ENV, "BUILDKITE_REPO") do
    annotate_and_exit("BUILDKITE_REPO not set")
end
const bk_commit = get(ENV, "BUILDKITE_COMMIT") do
    annotate_and_exit("BUILDKITE_COMMIT not set")
end
const bk_branch = get(ENV, "BUILDKITE_BRANCH") do
    annotate_and_exit("BUILDKITE_BRANCH not set")
end
const bk_build_url = get(ENV, "BUILDKITE_BUILD_URL") do
    annotate_and_exit("BUILDKITE_BUILD_URL not set")
end
const bk_build_number = get(ENV, "BUILDKITE_BUILD_NUMBER") do
    annotate_and_exit("BUILDKITE_BUILD_NUMBER not set")
end
const bk_checkout_path = get(ENV, "BUILDKITE_BUILD_CHECKOUT_PATH") do
    annotate_and_exit("BUILDKITE_BUILD_CHECKOUT_PATH not set")
end


using Downloads: Downloads
using Pkg: Pkg, PackageSpec
using SHA: SHA

# Install CoverageTools.jl
try
    Pkg.UPDATED_REGISTRY_THIS_SESSION[] = true
    Pkg.activate("julia-coverage", shared = true)
    Pkg.add(PackageSpec(name = "CoverageTools", uuid = "c36e975a-824b-4404-a568-ef97ca766997"))
    using CoverageTools: CoverageTools
catch
    annotate_and_exit("failed to install CoverageTools.jl")
end

# Codecov CLI v9.0.4 (https://github.com/codecov/codecov-cli/releases/tag/v9.0.4)
# Generated by utils/checksums.jl
const sources = Dict{Tuple{String, Union{String, Nothing}, Symbol}, Tuple{String, String}}(
    ("linux", "glibc", :x86_64) =>
        ("https://github.com/codecov/codecov-cli/releases/download/v9.0.4/codecovcli_linux", "42803b7cc22e28e12a02c84435cd6f6fbde41946fb15038f0791669906508a03"),
    ("linux", "glibc", :aarch64) =>
        ("https://github.com/codecov/codecov-cli/releases/download/v9.0.4/codecovcli_linux_arm64", "75b732dcd97df294d86f3ba47dd4c1fc1c225e1086ae1da7abbc2d0cc0a27313"),
    ("linux", "musl", :x86_64) =>
        ("https://github.com/codecov/codecov-cli/releases/download/v9.0.4/codecovcli_alpine_x86_64", "88860d097bcf5e6ebafad3afbbf0020b5020a284241a476c74a22aa44491711d"),
    ("linux", "musl", :aarch64) =>
        ("https://github.com/codecov/codecov-cli/releases/download/v9.0.4/codecovcli_alpine_arm64", "0466863a95d6917367314fc7ae6dd927ceac11b5bdb7138a83fdcfebe63c9745"),
    ("macos", nothing, :aarch64) =>
        ("https://github.com/codecov/codecov-cli/releases/download/v9.0.4/codecovcli_macos", "dca8ac44b21a785496507b6161a1a888a7ac574ca273c7237dc0c4e940086281"),
    ("windows", nothing, :x86_64) =>
        ("https://github.com/codecov/codecov-cli/releases/download/v9.0.4/codecovcli_windows.exe", "eceaaf874e402b2c8085b514ae090367bcbc51e1a77fc694a056ec0c1d13e417"),
)

# Download, verify and make it executable
function download_codecovcli()
    os = Sys.islinux() ? "linux" : Sys.isapple() ? "macos" : Sys.iswindows() ? "windows" :
        annotate_and_exit("Unsupported OS: $(Sys.MACHINE)")
    libc = Sys.islinux() ? Base.BinaryPlatforms.libc(Base.BinaryPlatforms.HostPlatform()) : nothing
    arch = Sys.ARCH
    (url, shasum) = get(sources, (os, libc, arch)) do
        annotate_and_exit("Unsupported platform: $(Sys.MACHINE)")
    end
    tmpdir = mktempdir()
    exepath = joinpath(tmpdir, basename(url))
    Downloads.download(url, exepath)
    bytes = open(SHA.sha256, exepath)
    if bytes2hex(bytes) != shasum
        annotate_and_exit("shasum mismatch for codecovcli download")
    end
    chmod(exepath, filemode(exepath) | 0o100)
    return exepath
end

# Handle the `dirs` input property
function coverage_dirs()
    dirs = String[]
    for (k, v) in ENV
        if occursin(r"^BUILDKITE_PLUGIN_JULIA_COVERAGE_DIRS_[0-9]+$", k)
            push!(dirs, v)
        end
    end
    isempty(dirs) && push!(dirs, "src", "ext")
    filter!(isdir, dirs)
    isempty(dirs) && annotate_and_exit("none of the configured directories exist")
    return dirs
end


# Process the coverage files
function process_coverage(dirs)
    try
        cd(bk_checkout_path) do
            coverage_data = mapreduce(CoverageTools.process_folder, vcat, dirs)
            CoverageTools.LCOV.writefile("lcov.info", coverage_data)
        end
    catch
        annotate_and_exit("failed to process coverage files")
    end
    return
end

# Upload the data using the Codecov CLI
function upload_coverage(exepath)
    # Note 1: Apparently you have to use the undocumented command `upload-process` instead
    # of `do-upload`. `upload-process` seems to be a meta command which runs
    # `create-commit`, `create-report` and finally `do-upload`.
    # Note 2: We rely on `--auto-load-params-from BuildKite` to automatically detect most of
    # the required arguments (commit/branch/build number etc). However, we manually
    # configure the slug because the CLI uses the buildkite slug which doesn't match the
    # GitHub slug. Unless the GitHub slug is used nothing shows up in the Codecov UI...
    m = match(r"^(:?https://|git@)github.com(?:/|:)(?<slug>.+)\.git$", bk_repo)
    if m === nothing
        annotate_and_exit("failed to extract GitHub slug from BUILDKITE_REPO ($bk_repo)")
    end
    slug = String(m[:slug])
    cmd = ```
    $(exepath)
        --auto-load-params-from BuildKite
        upload-process
        --slug $slug
        --plugin noop
        --disable-search
        --file lcov.info
    ```
    if (token = get(ENV, "CODECOV_TOKEN", nothing); token !== nothing)
        cmd = `$cmd --token $token`
    end
    if FAIL_ON_ERROR
        cmd = `$cmd --fail-on-error`
    else
        cmd = ignorestatus(cmd)
    end
    cmd = setenv(cmd; dir = bk_checkout_path)
    # This is behind an environment variable so that we can skip submission when testing the
    # plugin itself.
    if get(ENV, "JULIA_COVERAGE_SUBMIT", "true") == "true"
        run(cmd)
    end
    return
end

function main()
    dirs = coverage_dirs()
    process_coverage(dirs)
    exepath = download_codecovcli()
    upload_coverage(exepath)
end

if abspath(PROGRAM_FILE) == @__FILE__
    try
        main()
    catch e
        err = sprint(showerror, e)
        annotate_and_exit("failed to process and upload coverage: $err")
    end
end
